{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started","text":""},{"location":"#how-to-look-up-a-specific-command","title":"How to look up a specific Command","text":"<p>  Use the top right \"Search\" to find a command or action (e.g. \"differences\"). To show examples use the (1) icon.</p> <ol> <li>Examples <code>git &lt;command&gt;</code></li> </ol>"},{"location":"#basic-commands","title":"Basic Commands","text":"<p>Initialize new repository (1)</p> <ol> <li>Examples <code>git init</code> no parameter to initialize the current directory <code>git init /temp/somedir</code> use for to initialize a specific directory </li> </ol> <pre><code>git init\n</code></pre> <p>Or clone existing repository. (1)</p> <ol> <li>Examples <code>git clone /path/to/git-repository.git</code> <code>git clone https://github.com/rainan16/PVmeter.git</code></li> </ol> <pre><code>git clone &lt;repository&gt;\n</code></pre> <p>Stage all changes in <code>&lt;directory&gt;</code> or <code>&lt;file&gt;</code> for next commit. (1)</p> <ol> <li>Examples <code>git add .</code> <code>git add some_file.md</code></li> </ol> <pre><code>git add &lt;directory_or_file&gt;\n</code></pre> <p>Commit your staged content as a new commit with a descriptive message <code>&lt;msg&gt;</code>. (1)</p> <ol> <li>Examples <code>git commit -m\"initial commit\"</code> Option <code>-a</code> automatically stages changes: <code>git commit -am\"some other commit\"</code> </li> </ol> <pre><code>git commit -m \"&lt;msg&gt;\"\n</code></pre> <p>Show changes in your working directory. (1)</p> <ol> <li>Examples <code>git status</code> <code>git status --oneline</code> non-verbose format</li> </ol> <pre><code>git status\n</code></pre> <p>Display commit history.  (1)</p> <ol> <li>Examples <code>git log</code> <code>git log --oneline</code> non-verbose format <code>git log --graph</code> graphical format</li> </ol> <pre><code>git log\n</code></pre> <p>Show unstages changes in your working directory.  (1)</p> <ol> <li>Examples <code>git diff</code> <code>git diff &lt;file_name&gt;</code> diff only one file </li> </ol> <pre><code>git diff\n</code></pre>"},{"location":"about/","title":"About this Cheat Sheet","text":"<p>This searchable cheat sheet covers the most important and commonly used Git commands.  </p> <p>Git is an open source distributed version control system.  </p> <p>References https://www.mkdocs.org https://squidfunk.github.io/mkdocs-material/ https://git-scm.com/docs/git-help </p>"},{"location":"branches/","title":"Branches & Tags","text":""},{"location":"branches/#merge-branches","title":"Merge Branches","text":"<p>Merge <code>&lt;branch-x&gt;</code> into the current branch. <pre><code>git merge &lt;branch-x&gt;\n</code></pre></p>"},{"location":"branches/#delete-branch","title":"Delete Branch","text":"<p>Delete <code>&lt;branch-x&gt;</code>. <pre><code>git branch -d &lt;branch-x&gt;\n</code></pre></p> Options git branch <p><code>-dr &lt;remote/branch-name&gt;</code> delete a remote branche</p>"},{"location":"branches/#create-tag","title":"Create Tag","text":"<p>Mark the current commit with a <code>&lt;tag-name&gt;</code>. ```shell git ta</p>"},{"location":"configuration/","title":"Install/Configure","text":""},{"location":"configuration/#installation","title":"Installation","text":"<p>Install Git for any platform http://git-scm.com</p>"},{"location":"configuration/#configuration","title":"Configuration","text":"<p>Set user name and email that is shown in version history.  </p> <pre><code>git config user.name \"Firstname Lastname\"\ngit config user.email \"my-email@domain.com\"\n</code></pre> Options git config <p><code>--global</code> set user.name for all, not just the current repository</p> <p>Automatic command line coloring. <pre><code>git config --global color.ui auto\n</code></pre></p> <p>To ignore some files create a <code>.gitignore</code> with desired patterns as with either direct string matches or wildcard globs.</p>"},{"location":"localchanges/","title":"Local changes","text":""},{"location":"localchanges/#show-changes","title":"Show Changes","text":"<p>Show changes in your working directory. <pre><code>git status\n</code></pre></p>"},{"location":"localchanges/#show-file-differences","title":"Show File Differences","text":"<p>Show all differences of what is changed but not staged.  <pre><code>git diff\n</code></pre></p> Options git diff <p><code>--staged</code> for what's staged, but not commited parameter <code>my-filename</code> shows a specific file only</p>"},{"location":"localchanges/#handle-changes","title":"Handle Changes","text":""},{"location":"localchanges/#add-changes-for-next-commit","title":"Add Changes for Next Commit","text":"<p>Add all tracked and untracked files or just a specific file to your next commit (stage). <pre><code>git add &lt;file_or_directory&gt;\n</code></pre></p> Options git add <p><code>.</code> add all tracked or untracked files <code>my-changed-file</code> add a specific file only</p>"},{"location":"localchanges/#commit-changes","title":"Commit Changes","text":"<p>Commit your changed content as a new commit. <pre><code>git commit -am \"&lt;descriptive message&gt;\"\n</code></pre></p> Options git diff <p><code>-a</code> automatically stage all tracked, modified files before the commit <code>-m &lt;msg&gt;</code> use the given  as the commit message <code>-am &lt;msg&gt;</code> stage tracked and commit with  in one step"},{"location":"localchanges/#amend-last-message","title":"Amend last message","text":"<p>Change last commit message.  </p> <pre><code>git commit --amend \"&lt;descriptive message&gt;\"\n</code></pre> <p>Don't amend pushed commits</p>"},{"location":"localchanges/#rebase","title":"Rebase","text":"<p>Rebase the current branch onto <code>&lt;base&gt;</code>, where <code>&lt;base&gt;</code> can be a commit ID, branch name or tag. <pre><code>git rebase &lt;base&gt;\n</code></pre></p> <p>Don't rebase pushed commits</p>"},{"location":"localchanges/#explicit-versioning-a-file-remove","title":"Explicit versioning a file remove","text":"<p>Delete the file from repo and stage the removal for commit. <pre><code>git rm &lt;file&gt;\n</code></pre></p>"},{"location":"localchanges/#undo-changes","title":"Undo Changes","text":""},{"location":"localchanges/#undo-last-changes","title":"Undo last Changes","text":"<p>Discard all changes, <pre><code>git reset HEAD\n</code></pre></p> <p>Unstage a file while retaining the changes. <pre><code>git reset &lt;file-name&gt;\n</code></pre></p> Options git reset <p><code>--hard</code> automatically stage all tracked, modified files before the commit <code>-m &lt;msg&gt;</code> use the given  as the commit message <code>-am &lt;msg&gt;</code> stage tracked and commit with  in one step  <p>Discard any local, uncommitted changes and thereby restore their last committed state. <pre><code>git restore .\n</code></pre></p>"},{"location":"localchanges/#revert","title":"Revert","text":"<p>Use this command to undo changes to a repository's puplished commit history. The other undo-commands such as, git checkout or git reset, move the HEAD/branch ref pointers to a specified commit. The <code>revert</code> operation will take the specified commit, inverse its changes and creates a new &amp; reverted commit.</p> <pre><code>git revert &lt;SHA&gt;\n</code></pre>"},{"location":"localchanges/#show-commit-history","title":"Show Commit History","text":"<p>Show the commit history for the currently active branch, starting with the newest. <pre><code>git log\n</code></pre></p> Options git log <p><code>--oneline</code> shows only short SHA and message <code>--graph</code> show branches in a graphical way <code>--follow &lt;file-name&gt;</code> Show the commits that changed a file, even across renames</p>"},{"location":"localchanges/#show-git-object","title":"Show Git Object","text":"<p>Show any object in Git <code>&lt;SHA&gt;</code> in human-readable format. <pre><code>git show &lt;SHA&gt;\n</code></pre></p>"},{"location":"localchanges/#temporary-commits","title":"Temporary commits","text":"<p>This is useful to temporarily store modified files (on a stash stack) in order to change branches. For example when pulling into a dirty working directory (1)</p> <ol> <li>Example pulling to dirty directory <pre><code>$ git pull\n...\nfile foobar not up to date, cannot merge.\n$ git stash\n$ git pull\n$ git stash pop\n</code></pre></li> </ol> <p>Save modified and staged local modifications away and revert the working directory. <pre><code>git stash\n</code></pre></p> <p>List stack-order of stashed file changes. <pre><code>git stash list\n</code></pre></p> <p>Re-apply stored changes from top of the stash stack.  <pre><code>git stash pop\n</code></pre></p> <p>Discard the changes from top of the stash stack. <pre><code>git stash drop\n</code></pre></p>"},{"location":"repository/","title":"Repository","text":""},{"location":"repository/#initialize-repository","title":"Initialize Repository","text":"<p>Initialize any existing directory as a Git repository. <pre><code>git init\n</code></pre></p>"},{"location":"repository/#download-repository","title":"Download Repository","text":"<p>Download an entire repository from any location. <pre><code>git clone &lt;path-or-url-to-repository&gt;\n</code></pre></p>"},{"location":"repository/#remote-repositories","title":"Remote Repositories","text":"<p>Show all configured remotes. <pre><code>git remote -v\n</code></pre></p> <p>Create a new connection to a remote repository. After adding you can use <code>&lt;shortname&gt;</code> as a shortcut for <code>&lt;url&gt;</code> in other commands. <pre><code>git remote add &lt;shortname&gt; &lt;url&gt;\n</code></pre></p> <p>Fetches remote refs. Do this before actually pulling all changes to local. <pre><code>git fetch\n</code></pre></p> Options git fetch <p><code>&lt;remote&gt;</code> fetch from a secific remote repository <code>&lt;branch&gt;</code> fetch only one branch, not all remote refs</p> <p>Fetches remote copy of current branch and immediatly merge it into local copy. <pre><code>git pull\n</code></pre></p> Options git pull <p><code>&lt;remote&gt;</code> fetch from a secific remote repository</p> <p>Push curent branch to remote repository including all necessary commits and objects. This automatically creates a new remote branch if it doesn't exist. <pre><code>git push\n</code></pre></p> Options git push <p><code>&lt;remote&gt;</code> push to a secific remote repository <code>&lt;branch&gt;</code> push specific branch</p>"}]}